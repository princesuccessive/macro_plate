# Generated by Django 2.2.4 on 2020-10-13 04:41
from datetime import timedelta

from django.db import migrations
from django.utils import timezone


def generate_schedules(apps, schema_editor):
    """Generate schedules for all historical customers without schedules."""
    Customer = apps.get_model('macroplate', 'Customer')
    WeeklySchedule = apps.get_model('macroplate', 'WeeklySchedule')
    DailySchedule = apps.get_model('macroplate', 'DailySchedule')

    interval = timezone.now() - timedelta(days=30)
    customers = Customer.objects.exclude(
        latest=None
    )

    count_fixed = 0
    for customer in customers:
        weekly_schedule = WeeklySchedule.objects.filter(
            customer=customer,
        ).first()
        current_default_daily_schedule = DailySchedule.objects.filter(
            date=None,
            customer=customer,
        )

        if weekly_schedule and current_default_daily_schedule:
            continue

        # if weekly_schedule is none, copy it from latest version
        if not weekly_schedule:
            schedule = customer.latest.weekly_schedule
            schedule.pk = None
            schedule.customer = customer
            schedule.save()

        # if no default_daily_schedule, copy it from latest version
        if not current_default_daily_schedule:
            # Delete old Daily schedules
            current_default_daily_schedule.delete()

            # Copy latest default daily schedules
            schedules_latest = DailySchedule.objects.filter(
                date=None,
                customer=customer.latest,
            )
            for schedule in schedules_latest:
                schedule.pk = None
                schedule.customer = customer
                schedule.save()

        count_fixed += 1
    print(f"Fixed {count_fixed} customers")


class Migration(migrations.Migration):
    dependencies = [
        ('macroplate', '0052_auto_20200708_0943'),
    ]

    operations = [
        migrations.RunPython(
            generate_schedules,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
